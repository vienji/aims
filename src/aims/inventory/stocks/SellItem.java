/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aims.inventory.stocks;

import aims.classes.EntryAccount;
import aims.classes.Item;
import aims.databasemanager.AccountingDBController;
import aims.databasemanager.InventoryDBController;
import java.awt.Image;
import java.sql.Date;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Vienji
 */
public class SellItem extends javax.swing.JFrame {
    LocalDate date = LocalDate.now();
    Date sqlDate = Date.valueOf(date);
    /**
     * Creates new form SellItem
     */
    public SellItem() {
        initComponents();
        initItemList();
        quantity.setEnabled(false);
        addToList.setEnabled(false);
        cancelAdd.setEnabled(false);
        setIcons("src\\aims\\images\\search.png", searchItem);
        setIcons("src\\aims\\images\\refresh.png", refresh);
        ImageIcon icon = new ImageIcon("src\\aims\\images\\aims-logo.png");
        setIconImage(icon.getImage());
    }
    int stock = 0; 
    ArrayList<Item> cartList = new ArrayList<>();   
    
    private void initItemList(){
        DecimalFormat decimalFormat = new DecimalFormat("0.00");
        decimalFormat.setGroupingUsed(true);
        decimalFormat.setGroupingSize(3);
        
        itemList.setModel(new DefaultTableModel(null, new String[]{"SID", "Item Name", "Price",
            "Remaining Stock", "Status"}));
        
        DefaultTableModel stocksTable = (DefaultTableModel) itemList.getModel();
        
        ArrayList<Item> stocks = new InventoryDBController().getItems();
        
        Iterator i = (Iterator) stocks.iterator();
        
        while(i.hasNext()){
            Item item = (Item) i.next();
                       
            if(item.getDeleted().equals("No")){
                String[] itemData = {item.getSID(), item.getItemName(), 
                   " ₱ " + decimalFormat.format(Float.parseFloat(item.getCost())), 
                   item.getQuantity(), item.getStatus()};

                stocksTable.addRow(itemData);
            }
        }
    }
    
    private void showCart(){
        DecimalFormat decimalFormat = new DecimalFormat("0.00");
        decimalFormat.setGroupingUsed(true);
        decimalFormat.setGroupingSize(3);
        
        cart.setModel(new DefaultTableModel(null, new String[]{"SID", "Item Name", "Quantity",
            "Amount"}));
        
        DefaultTableModel cartTable = (DefaultTableModel) cart.getModel();
        
        Iterator i = (Iterator) cartList.iterator();
        
        while(i.hasNext()){
            Item item = (Item) i.next();
           
            String[] itemData = {item.getSID(), item.getItemName(), item.getQuantity(),
                   " ₱ " + decimalFormat.format(Float.parseFloat(item.getCost())), 
                   };

            cartTable.addRow(itemData);
            
        }
        
    }
    
    private float toTotal(ArrayList<Item> items){
        float sellingTotal = 0f;
        
        for(Item a : items){
            sellingTotal += Float.parseFloat(a.getCost());        
        }
        
        return sellingTotal;
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sell = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemList = new javax.swing.JTable();
        searchItem = new javax.swing.JLabel();
        itemValue = new javax.swing.JTextField();
        searchItemBy = new javax.swing.JComboBox<>();
        addToList = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        vendor = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        cart = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        removeItem = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        purpose = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        totalCost = new javax.swing.JLabel();
        select = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        sID = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        itemName = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cost = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        remStocks = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();
        quantity = new javax.swing.JSpinner();
        cancelAdd = new javax.swing.JButton();
        refresh = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        sell.setText("Sell");
        sell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        itemList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SID", "Item Name", "Price", "Remaining Stock", "Status"
            }
        ));
        jScrollPane2.setViewportView(itemList);

        searchItem.setMaximumSize(new java.awt.Dimension(64, 64));
        searchItem.setMinimumSize(new java.awt.Dimension(64, 64));
        searchItem.setPreferredSize(new java.awt.Dimension(20, 20));
        searchItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchItemMouseClicked(evt);
            }
        });

        searchItemBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SID", "Item Name" }));

        addToList.setText("Add to List");
        addToList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToListActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        jLabel13.setText("Vendor:");

        vendor.setText("Username");

        cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SID", "Item name", "Quantity", "Amount"
            }
        ));
        jScrollPane3.setViewportView(cart);

        jLabel1.setText("List of items to be sold");

        removeItem.setText("Remove Item");
        removeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemActionPerformed(evt);
            }
        });

        clearAll.setText("Clear All");
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vendor))
                            .addComponent(jLabel1))
                        .addGap(0, 181, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(clearAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeItem)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeItem)
                    .addComponent(clearAll))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(vendor))
                .addContainerGap())
        );

        purpose.setColumns(20);
        purpose.setRows(5);
        jScrollPane1.setViewportView(purpose);

        jLabel9.setText("Purpose:");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setText("Total:  ₱");

        totalCost.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        totalCost.setText("0.00");

        select.setText("Select");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setText("SID:");

        sID.setText("000");

        jLabel7.setText("Item name:");

        itemName.setText("Item Name");

        jLabel11.setText("Cost:  ₱");

        cost.setText("0.00");

        jLabel14.setText("Remaining Stock:");

        remStocks.setText("0");

        jLabel16.setText("Quantity:");

        jLabel17.setText("Amount: ₱");

        amount.setText("0.00");

        quantity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantityStateChanged(evt);
            }
        });
        quantity.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                quantityCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sID))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemName))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cost))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remStocks)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amount))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(sID)
                    .addComponent(jLabel16)
                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(itemName)
                    .addComponent(jLabel17)
                    .addComponent(amount))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cost))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(remStocks))
                .addContainerGap())
        );

        cancelAdd.setText("Cancel");
        cancelAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAddActionPerformed(evt);
            }
        });

        refresh.setPreferredSize(new java.awt.Dimension(20, 20));
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sell)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(select, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addToList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemValue, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchItemBy, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalCost)))
                        .addGap(0, 4, Short.MAX_VALUE)))
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchItemBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(select)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addToList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelAdd))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(totalCost))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sell)
                    .addComponent(cancel))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addToListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToListActionPerformed
        
        if(stock - (int) quantity.getValue() >= 0 && (int) quantity.getValue() >= 0){
            if((int) quantity.getValue() > 0){
                InventoryDBController invCont = new InventoryDBController();
                Item item = new Item();

                DecimalFormat decimalFormat = new DecimalFormat("0.00");
                decimalFormat.setGroupingUsed(true);
                decimalFormat.setGroupingSize(3);
                
                int q = (int) quantity.getValue();
                float t = q * Float.parseFloat(cost.getText());

                item.setSID(sID.getText());
                item.setItemName(itemName.getText());
                item.setQuantity(String.valueOf(quantity.getValue()));
                item.setCost(String.valueOf(t));

                invCont.setRemaining(item.getSID(), remStocks.getText(), "Decrease");
                invCont.setItemStatus(item.getSID(), invCont.itemStatusChecker(Integer.parseInt(remStocks.getText())));

                initItemList();

                sID.setText("000");
                itemName.setText("Item Name");
                quantity.setValue(0);        
                amount.setText("0.00");
                cost.setText("0.00");
                remStocks.setText("0");

                cartList.add(item);
                showCart();
                totalCost.setText(decimalFormat.format(toTotal(cartList)));
                addToList.setEnabled(false);
                quantity.setEnabled(false);
                cancelAdd.setEnabled(false);       
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please add at least 1 item!");      
            }
        } else if ( stock - (int) quantity.getValue() < 0){
            JOptionPane.showMessageDialog(rootPane, "There's not enough stock!");
            quantity.setValue(stock);
        } else {
            quantity.setValue(0);
        }           
    }//GEN-LAST:event_addToListActionPerformed

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        
        if(itemList.getSelectedRow() >= 0){
            sID.setText(String.valueOf(itemList.getValueAt(itemList.getSelectedRow(), 0)));
            itemName.setText(String.valueOf(itemList.getValueAt(itemList.getSelectedRow(), 1)));

            cost.setText(String.format("%.2f",Float.parseFloat(
                    String.valueOf(itemList.getValueAt(itemList.getSelectedRow(), 2)).substring(2).replace(",", ""))));
            remStocks.setText(String.valueOf(itemList.getValueAt(itemList.getSelectedRow(), 3)));
            stock = Integer.parseInt(remStocks.getText());
            addToList.setEnabled(true);
            quantity.setEnabled(true);
            cancelAdd.setEnabled(true);  
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please select an item!");
        }       
    }//GEN-LAST:event_selectActionPerformed

    private void quantityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantityStateChanged
       if(stock - (int) quantity.getValue() >= 0 && (int) quantity.getValue() >= 0){
           DecimalFormat decimalFormat = new DecimalFormat("0.00");
           decimalFormat.setGroupingUsed(true);
           decimalFormat.setGroupingSize(3);
           
           int q = (int) quantity.getValue();
           float t = q * Float.parseFloat(cost.getText());
           
           amount.setText(decimalFormat.format(t));
           
           int rem = stock - (int) quantity.getValue();
           remStocks.setText(String.valueOf(rem));
       } else if ( stock - (int) quantity.getValue() < 0){
           JOptionPane.showMessageDialog(rootPane, "There's not enough stock!");
           quantity.setValue(stock);
       } else {
           quantity.setValue(0);
       }
    }//GEN-LAST:event_quantityStateChanged

    private void cancelAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAddActionPerformed
        sID.setText("000");
        itemName.setText("Item Name");
        quantity.setValue(0);        
        amount.setText("0.00");
        cost.setText("0.00");
        remStocks.setText("0");
        addToList.setEnabled(false);
        quantity.setEnabled(false);
        cancelAdd.setEnabled(false);
    }//GEN-LAST:event_cancelAddActionPerformed

    private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
        if(cart.getSelectedRow() >= 0){
            InventoryDBController invCont = new InventoryDBController();
            Item item = cartList.get(cart.getSelectedRow());
            
            invCont.setRemaining(item.getSID(), item.getQuantity(), "increase");
            invCont.setItemStatus(item.getSID(), 
                    invCont.itemStatusChecker(invCont.getRemaining(item.getSID(), item.getQuantity())));
            cartList.remove(cart.getSelectedRow());
            initItemList();
            showCart();
            totalCost.setText(String.format("%.2f",toTotal(cartList)));
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please select an item to delete!");
        }            
    }//GEN-LAST:event_removeItemActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        DecimalFormat decimalFormat = new DecimalFormat("0.00");
        decimalFormat.setGroupingUsed(true);
        decimalFormat.setGroupingSize(3);
        
        if(cartList.size() > 0){
            InventoryDBController invCont = new InventoryDBController();
            cartList.forEach((i) -> {
                invCont.setRemaining(i.getSID(), i.getQuantity(), "increase");
                invCont.setItemStatus(i.getSID(), 
                    invCont.itemStatusChecker(invCont.getRemaining(i.getSID(), i.getQuantity())));
            });           
            cartList.clear();
            initItemList();
            showCart();
            totalCost.setText(decimalFormat.format(toTotal(cartList)));
        } else {
            JOptionPane.showMessageDialog(rootPane, "List is empty!");
        }
    }//GEN-LAST:event_clearAllActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        if(cartList.size() > 0){
            InventoryDBController invCont = new InventoryDBController();
                cartList.forEach((i) -> {
                    invCont.setRemaining(i.getSID(), i.getQuantity(), "increase");
                    invCont.setItemStatus(i.getSID(), 
                        invCont.itemStatusChecker(invCont.getRemaining(i.getSID(), i.getQuantity())));
                });
        }               
        dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void sellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellActionPerformed
        if(purpose.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane,"Please state your purpose!");
        } else if (cartList.isEmpty()){
            JOptionPane.showMessageDialog(rootPane,"Please add an item to sell!");
        } else {
            int n = JOptionPane.showConfirmDialog(rootPane, "Do you wish to sell these/this item/s?");

            if(n == 0){
                EntryAccount e1 = new EntryAccount(), e2 = new EntryAccount();
                ArrayList<EntryAccount> entry = new ArrayList<>();

                e1.setAccountName("Materials Cost");
                e1.setAction("Debit");
                e1.setAmount(String.valueOf(toTotal(cartList)));
                e2.setAccountName("Inventory");
                e2.setAction("Credit");
                e2.setAmount(String.valueOf(toTotal(cartList)));
                entry.add(e1);
                entry.add(e2);

                new AccountingDBController().addJournalEntry(sqlDate,
                    purpose.getText(), vendor.getText(), entry, String.valueOf(new AccountingDBController().getSetCurrentJournal()));

                JOptionPane.showMessageDialog(rootPane, "Items were sold and the transaction was added into the accounting journal.");
                dispose();
            }                 
        }       
    }//GEN-LAST:event_sellActionPerformed

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked
       initItemList();
    }//GEN-LAST:event_refreshMouseClicked

    private void searchItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchItemMouseClicked
        String value = "", by = "";

        switch(String.valueOf(searchItemBy.getSelectedItem())){
            case "SID":
            value = "'%" + itemValue.getText() + "%'";
            by = "stocks.SID";
            break;

            case "Item Name":
            value = "'%" + itemValue.getText() + "%'";
            by = "stocks.item_name";
            break;
        }

        DecimalFormat decimalFormat = new DecimalFormat("0.00");
        decimalFormat.setGroupingUsed(true);
        decimalFormat.setGroupingSize(3);

        itemList.setModel(new DefaultTableModel(null, new String[]{"SID", "Item Name", "Price",
            "Remaining Stock", "Status"}));

DefaultTableModel stocksTable = (DefaultTableModel) itemList.getModel();

ArrayList<Item> stocks = new InventoryDBController().searchItem(value, by);

if(stocks.isEmpty()){
    String[] itemData = {"No item found", "No item found",
        "No item found", "No item found", "No item found"};

        stocksTable.addRow(itemData);
        } else {
            Iterator i = (Iterator) stocks.iterator();

            while(i.hasNext()){
                Item item = (Item) i.next();

                if(item.getDeleted().equals("No")){
                    String[] itemData = {item.getSID(), item.getItemName(),
                        " ₱ " + decimalFormat.format(Float.parseFloat(item.getCost())),
                        item.getQuantity(), item.getStatus()};

                    stocksTable.addRow(itemData);
                }
            }
        }
    }//GEN-LAST:event_searchItemMouseClicked

    private void quantityCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_quantityCaretPositionChanged
        if(stock - (int) quantity.getValue() >= 0 && (int) quantity.getValue() >= 0){
           DecimalFormat decimalFormat = new DecimalFormat("0.00");
           decimalFormat.setGroupingUsed(true);
           decimalFormat.setGroupingSize(3);
           
           int q = (int) quantity.getValue();
           float t = q * Float.parseFloat(cost.getText());
           
           amount.setText(decimalFormat.format(t));
           
           int rem = stock - (int) quantity.getValue();
           remStocks.setText(String.valueOf(rem));
       } else if ( stock - (int) quantity.getValue() < 0){
           JOptionPane.showMessageDialog(rootPane, "There's not enough stock!");
           quantity.setValue(stock);
       } else {
           quantity.setValue(0);
       }
    }//GEN-LAST:event_quantityCaretPositionChanged

    private void setIcons(String filePath, JLabel label){
          ImageIcon icon = new ImageIcon(filePath);
          Image image = icon.getImage().getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
          label.setIcon(new ImageIcon(image));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SellItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToList;
    private javax.swing.JLabel amount;
    private javax.swing.JButton cancel;
    private javax.swing.JButton cancelAdd;
    public javax.swing.JTable cart;
    private javax.swing.JButton clearAll;
    private javax.swing.JLabel cost;
    public javax.swing.JTable itemList;
    private javax.swing.JLabel itemName;
    private javax.swing.JTextField itemValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea purpose;
    private javax.swing.JSpinner quantity;
    private javax.swing.JLabel refresh;
    private javax.swing.JLabel remStocks;
    private javax.swing.JButton removeItem;
    private javax.swing.JLabel sID;
    private javax.swing.JLabel searchItem;
    private javax.swing.JComboBox<String> searchItemBy;
    private javax.swing.JButton select;
    private javax.swing.JButton sell;
    private javax.swing.JLabel totalCost;
    public javax.swing.JLabel vendor;
    // End of variables declaration//GEN-END:variables
}
